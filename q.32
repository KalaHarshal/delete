from collections import Counter

# Function to find the item with the highest frequency
def find_max_frequency_item(input_list):
    # Create a Counter object to count the frequency of each item
    count = Counter(input_list)
    
    # Find the item with the highest frequency
    max_item = count.most_common(1)[0]
    
    return max_item

# Sample input list
input_list = [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]

# Output the item with the highest frequency
max_item = find_max_frequency_item(input_list)

print("Original list:")
print(input_list)
print("Item with maximum frequency of the said list:")
print(max_item)




from datetime import datetime

# Define the Person class
class Person:
    # Constructor to initialize name, country, and date_of_birth
    def __init__(self, name, country, date_of_birth):
        self.name = name
        self.country = country
        self.date_of_birth = datetime.strptime(date_of_birth, "%Y-%m-%d")  # Convert string to datetime object

    # Method to calculate age based on date_of_birth
    def calculate_age(self):
        # Get the current date
        current_date = datetime.now()
        # Calculate the difference in years
        age = current_date.year - self.date_of_birth.year
        # Adjust if the birthday hasn't occurred yet this year
        if current_date.month < self.date_of_birth.month or (current_date.month == self.date_of_birth.month and current_date.day < self.date_of_birth.day):
            age -= 1
        return age

    # Method to display person details
    def display_info(self):
        print("Name:", self.name)
        print("Country:", self.country)
        print("Date of Birth:", self.date_of_birth.strftime('%Y-%m-%d'))
        print("Age:", self.calculate_age(), "years old")

# Create a person object
person = Person(name="John Doe", country="USA", date_of_birth="1990-05-15")

# Display the person's details
person.display_info()
